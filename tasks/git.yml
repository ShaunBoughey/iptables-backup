---
- name: Check if git repository exists
  stat:
    path: "{{ backup_dir }}/.git"
  register: git_repo
  delegate_to: localhost
  run_once: true

- name: Initialize git repository if it doesn't exist
  shell: git init --initial-branch=main
  args:
    chdir: "{{ backup_dir }}"
  when: not git_repo.stat.exists
  delegate_to: localhost
  run_once: true

- name: Configure git user
  shell: |
    git config user.name "{{ git_user }}" || true
    git config user.email "{{ git_email }}" || true
  args:
    chdir: "{{ backup_dir }}"
  delegate_to: localhost
  run_once: true

- name: Check for a remote origin
  shell: git remote get-url origin
  args:
    chdir: "{{ backup_dir }}"
  register: git_remote_check
  failed_when: false
  changed_when: false
  delegate_to: localhost
  run_once: true

- name: Add remote origin if it doesn't exist
  shell: git remote add origin "{{ git_remote_url }}"
  args:
    chdir: "{{ backup_dir }}"
  when: git_remote_check.rc != 0
  delegate_to: localhost
  run_once: true

- name: Add and commit changes to git
  shell: |
    git add .
    git commit -m "Backup {{ timestamp }} - Backed up {{ ansible_play_hosts | length }} gateways" || true
  args:
    chdir: "{{ backup_dir }}"
  delegate_to: localhost
  run_once: true

- name: Stage and commit cleanup changes to git
  shell: |
    git add .
    git commit -m "Cleanup old backups (older than {{ retention_days }} days)" || true
  args:
    chdir: "{{ backup_dir }}"
  delegate_to: localhost
  run_once: true
  when: old_files.files | length > 0

- name: Push all changes to the remote repository
  shell: git push origin main
  args:
    chdir: "{{ backup_dir }}"
  delegate_to: localhost
  run_once: true
  when: git_enabled and git_remote_url is defined and git_remote_url | length > 0